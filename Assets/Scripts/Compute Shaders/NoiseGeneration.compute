// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel NoiseDensity


//includes
#include "Assets/Scripts/Include/SimplexNoise.compute"


// Noise settings
int seed;
StructuredBuffer<float3> octaveOffsets;
RWStructuredBuffer<float4> voxelPoints;
uint PointsPerAxis;
float3 chunkCentre;
float3 worldSize;
float voxelSpacing;
float chunkSize;
float3 offset;

int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closedEdges;
float hardFloor;
float hardFloorWeight;


//helper function
int indexFromCoord(uint x, uint y, uint z) {
	return z * PointsPerAxis * PointsPerAxis + y * PointsPerAxis + x;
}

[numthreads(8,8,8)]
void NoiseDensity(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= PointsPerAxis || id.y >= PointsPerAxis || id.z >= PointsPerAxis)
	{
		return;
	}

	float3 pos = chunkCentre + id * voxelSpacing - chunkSize / 2;
	float offsetNoise = 0;

	//FBM
	float frequency = noiseScale / 100;
	float amplitude = 1;
	float weight = 1;
	float noise = 0;

	for (int j = 0; j < octaves; j++) 
	{
		float n = cnoise(pos* frequency + offset);// +octaveOffsets[j] + offset);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}

	float finalVal = -(pos.y + floorOffset) + (noise * noiseWeight);

	if (pos.y < hardFloor) 
	{
		finalVal += hardFloorWeight;
	}

	int index = indexFromCoord(id.x, id.y, id.z);
	voxelPoints[index] = float4(pos, finalVal);

}

